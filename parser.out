Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NAME EQUALS expression
Rule 2     statement -> NEWLINE
Rule 3     statement -> expression
Rule 4     expression -> expression PLUS expression
Rule 5     expression -> expression MINUS expression
Rule 6     expression -> expression TIMES expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> expression POWER NUMBER
Rule 9     expression -> expression MINUSPOWER NUMBER
Rule 10    expression -> MINUS expression
Rule 11    expression -> LPAREN expression RPAREN
Rule 12    expression -> NUMBER
Rule 13    expression -> NAME

Terminals, with rules where they appear

DIVIDE               : 7
EQUALS               : 1
LPAREN               : 11
MINUS                : 5 10
MINUSPOWER           : 9
NAME                 : 1 13
NEWLINE              : 2
NUMBER               : 8 9 12
PLUS                 : 4
POWER                : 8
RPAREN               : 11
TIMES                : 6
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 4 4 5 5 6 6 7 7 8 9 10 11
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NAME EQUALS expression
    (2) statement -> . NEWLINE
    (3) statement -> . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression POWER NUMBER
    (9) expression -> . expression MINUSPOWER NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . NUMBER
    (13) expression -> . NAME

    NAME            shift and go to state 2
    NEWLINE         shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6

    statement                      shift and go to state 1
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> NAME . EQUALS expression
    (13) expression -> NAME .

    EQUALS          shift and go to state 8
    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    TIMES           reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    POWER           reduce using rule 13 (expression -> NAME .)
    MINUSPOWER      reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)


state 3

    (3) statement -> expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . POWER NUMBER
    (9) expression -> expression . MINUSPOWER NUMBER

    $end            reduce using rule 3 (statement -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13
    MINUSPOWER      shift and go to state 14


state 4

    (2) statement -> NEWLINE .

    $end            reduce using rule 2 (statement -> NEWLINE .)


state 5

    (10) expression -> MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression POWER NUMBER
    (9) expression -> . expression MINUSPOWER NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . NUMBER
    (13) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    NAME            shift and go to state 16

    expression                     shift and go to state 15

state 6

    (12) expression -> NUMBER .

    PLUS            reduce using rule 12 (expression -> NUMBER .)
    MINUS           reduce using rule 12 (expression -> NUMBER .)
    TIMES           reduce using rule 12 (expression -> NUMBER .)
    DIVIDE          reduce using rule 12 (expression -> NUMBER .)
    POWER           reduce using rule 12 (expression -> NUMBER .)
    MINUSPOWER      reduce using rule 12 (expression -> NUMBER .)
    $end            reduce using rule 12 (expression -> NUMBER .)
    RPAREN          reduce using rule 12 (expression -> NUMBER .)


state 7

    (11) expression -> LPAREN . expression RPAREN
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression POWER NUMBER
    (9) expression -> . expression MINUSPOWER NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . NUMBER
    (13) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    NAME            shift and go to state 16

    expression                     shift and go to state 17

state 8

    (1) statement -> NAME EQUALS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression POWER NUMBER
    (9) expression -> . expression MINUSPOWER NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . NUMBER
    (13) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    NAME            shift and go to state 16

    expression                     shift and go to state 18

state 9

    (4) expression -> expression PLUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression POWER NUMBER
    (9) expression -> . expression MINUSPOWER NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . NUMBER
    (13) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    NAME            shift and go to state 16

    expression                     shift and go to state 19

state 10

    (5) expression -> expression MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression POWER NUMBER
    (9) expression -> . expression MINUSPOWER NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . NUMBER
    (13) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    NAME            shift and go to state 16

    expression                     shift and go to state 20

state 11

    (6) expression -> expression TIMES . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression POWER NUMBER
    (9) expression -> . expression MINUSPOWER NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . NUMBER
    (13) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    NAME            shift and go to state 16

    expression                     shift and go to state 21

state 12

    (7) expression -> expression DIVIDE . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression POWER NUMBER
    (9) expression -> . expression MINUSPOWER NUMBER
    (10) expression -> . MINUS expression
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . NUMBER
    (13) expression -> . NAME

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    NAME            shift and go to state 16

    expression                     shift and go to state 22

state 13

    (8) expression -> expression POWER . NUMBER

    NUMBER          shift and go to state 23


state 14

    (9) expression -> expression MINUSPOWER . NUMBER

    NUMBER          shift and go to state 24


state 15

    (10) expression -> MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . POWER NUMBER
    (9) expression -> expression . MINUSPOWER NUMBER

    PLUS            reduce using rule 10 (expression -> MINUS expression .)
    MINUS           reduce using rule 10 (expression -> MINUS expression .)
    TIMES           reduce using rule 10 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 10 (expression -> MINUS expression .)
    POWER           reduce using rule 10 (expression -> MINUS expression .)
    MINUSPOWER      reduce using rule 10 (expression -> MINUS expression .)
    $end            reduce using rule 10 (expression -> MINUS expression .)
    RPAREN          reduce using rule 10 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! POWER           [ shift and go to state 13 ]
  ! MINUSPOWER      [ shift and go to state 14 ]


state 16

    (13) expression -> NAME .

    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    TIMES           reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    POWER           reduce using rule 13 (expression -> NAME .)
    MINUSPOWER      reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)
    RPAREN          reduce using rule 13 (expression -> NAME .)


state 17

    (11) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . POWER NUMBER
    (9) expression -> expression . MINUSPOWER NUMBER

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13
    MINUSPOWER      shift and go to state 14


state 18

    (1) statement -> NAME EQUALS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . POWER NUMBER
    (9) expression -> expression . MINUSPOWER NUMBER

    $end            reduce using rule 1 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13
    MINUSPOWER      shift and go to state 14


state 19

    (4) expression -> expression PLUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . POWER NUMBER
    (9) expression -> expression . MINUSPOWER NUMBER

    PLUS            reduce using rule 4 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 4 (expression -> expression PLUS expression .)
    MINUSPOWER      reduce using rule 4 (expression -> expression PLUS expression .)
    $end            reduce using rule 4 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13

  ! TIMES           [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! MINUSPOWER      [ shift and go to state 14 ]


state 20

    (5) expression -> expression MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . POWER NUMBER
    (9) expression -> expression . MINUSPOWER NUMBER

    PLUS            reduce using rule 5 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 5 (expression -> expression MINUS expression .)
    MINUSPOWER      reduce using rule 5 (expression -> expression MINUS expression .)
    $end            reduce using rule 5 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13

  ! TIMES           [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! MINUSPOWER      [ shift and go to state 14 ]


state 21

    (6) expression -> expression TIMES expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . POWER NUMBER
    (9) expression -> expression . MINUSPOWER NUMBER

    PLUS            reduce using rule 6 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 6 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 6 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 6 (expression -> expression TIMES expression .)
    MINUSPOWER      reduce using rule 6 (expression -> expression TIMES expression .)
    $end            reduce using rule 6 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 6 (expression -> expression TIMES expression .)
    POWER           shift and go to state 13

  ! POWER           [ reduce using rule 6 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! MINUSPOWER      [ shift and go to state 14 ]


state 22

    (7) expression -> expression DIVIDE expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . POWER NUMBER
    (9) expression -> expression . MINUSPOWER NUMBER

    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUSPOWER      reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 13

  ! POWER           [ reduce using rule 7 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! MINUSPOWER      [ shift and go to state 14 ]


state 23

    (8) expression -> expression POWER NUMBER .

    PLUS            reduce using rule 8 (expression -> expression POWER NUMBER .)
    MINUS           reduce using rule 8 (expression -> expression POWER NUMBER .)
    TIMES           reduce using rule 8 (expression -> expression POWER NUMBER .)
    DIVIDE          reduce using rule 8 (expression -> expression POWER NUMBER .)
    POWER           reduce using rule 8 (expression -> expression POWER NUMBER .)
    MINUSPOWER      reduce using rule 8 (expression -> expression POWER NUMBER .)
    $end            reduce using rule 8 (expression -> expression POWER NUMBER .)
    RPAREN          reduce using rule 8 (expression -> expression POWER NUMBER .)


state 24

    (9) expression -> expression MINUSPOWER NUMBER .

    PLUS            reduce using rule 9 (expression -> expression MINUSPOWER NUMBER .)
    MINUS           reduce using rule 9 (expression -> expression MINUSPOWER NUMBER .)
    TIMES           reduce using rule 9 (expression -> expression MINUSPOWER NUMBER .)
    DIVIDE          reduce using rule 9 (expression -> expression MINUSPOWER NUMBER .)
    POWER           reduce using rule 9 (expression -> expression MINUSPOWER NUMBER .)
    MINUSPOWER      reduce using rule 9 (expression -> expression MINUSPOWER NUMBER .)
    $end            reduce using rule 9 (expression -> expression MINUSPOWER NUMBER .)
    RPAREN          reduce using rule 9 (expression -> expression MINUSPOWER NUMBER .)


state 25

    (11) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    MINUSPOWER      reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (expression -> LPAREN expression RPAREN .)

